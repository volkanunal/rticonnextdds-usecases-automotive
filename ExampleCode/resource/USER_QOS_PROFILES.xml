<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for Automotive Example

The QoS configuration of the DDS entities in the generated example is loaded 
from this file.

This file is used only when it is in the current working directory or when the
environment variable NDDS_QOS_PROFILES is defined and points to this file.

The profile in this file inherits from the builtin QoS profile 
BuiltinQosLib::Generic.StrictReliable or BuiltinQosLibExp::Generic.BestEffort.
Those profiles, along with all of the other built-in QoS profiles can be 
found in the BuiltinProfiles.documentationONLY.xml file located in the 
$NDDSHOME/resource/xml/ directory.

You should not edit the file BuiltinProfiles.documentationONLY.xml directly.
However, if you wish to modify any of the values in a built-in profile, the
recommendation is to create a profile of your own and inherit from the built-in
profile you wish to modify. The NDDS_QOS_PROFILES.example.xml file (contained in 
the same directory as the BuiltinProfiles.documentationONLY.xml file) shows how
to inherit from the built-in profiles. 

For more information about XML QoS Profiles see Chapter 17 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.0.0/rti_dds_qos_profiles.xsd"
     version="6.0.0">
  <!-- QoS Library containing the QoS profile used in the Automotive Case + CODE.
       A QoS library is a named set of QoS profiles.
   -->

  <qos_library name="Demo_Library">
      <!-- QoS profiles used by the different applications of the autonotive Case + Code.
           A QoS profile groups a set of related QoS.
      -->
    <!-- qos_profile name="Lidar_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false"-->
    <qos_profile name="Lidar_Profile" base_name="BuiltinQosLibExp::Generic.StrictReliable" is_default_qos="false">
      <!-- QoS used to configure the LiDAR data writer created in the example code 
           The data is periodic; best effort is typical QoS. A deadline has been added
           to make sure that an error is reported when no data is received for a certain time.
           LiDAR data is huge and therefore requires an asynchronous publisher -->                
      <datawriter_qos>
        <publication_name>
          <name>LiDAR Data Writer</name>
        </publication_name>
        <publish_mode>
          <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
        </publish_mode>
        <deadline>
          <period>
            <sec>1</sec>
            <nanosec>0</nanosec>
          </period>
        </deadline>
      </datawriter_qos>

      <datareader_qos>
        <subscription_name>
          <name>LiDAR Data Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>2</sec>
          </period>
        </deadline>
      </datareader_qos>
      <participant_qos>
        <!--
          The participant name, if it is set, will be displayed in the
          RTI tools, making it easier for you to tell one
          application from another when debugging.
        -->
        <participant_name>
          <name>LiDAR</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>
      </participant_qos>
    </qos_profile>

    <qos_profile name="HMI_Profile" base_name="BuiltinQosLibExp::Generic.StrictReliable" is_default_qos="false">
      <!-- QoS used to configure the HMI data reader. The HMI receives asynchronous events. 
           Relibale communication ha sbeen configure dto make sure that the HMI does not
           miss any events. -->
      <participant_qos>
        <!--
          The participant name, if it is set, will be displayed in the
          RTI tools, making it easier for you to tell one
          application from another when you're debugging.
        -->
        <participant_name>
          <name>HMI</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>
      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>HMI Alert Reader</name>
        </subscription_name>
        <durability>
          <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
        </durability>
        <history>
          <depth>1</depth>
        </history>
        <liveliness>
          <lease_duration>
            <sec>60</sec>
            <nanosec>0</nanosec>
          </lease_duration>
          <assertions_per_lease_duration>10</assertions_per_lease_duration>
          <kind>AUTOMATIC_LIVELINESS_QOS</kind>
        </liveliness>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Alert Publisher</name>
        </publication_name>
        <durability>
          <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
        </durability>
        <liveliness>
          <lease_duration>
            <sec>60</sec>
            <nanosec>0</nanosec>
          </lease_duration>
          <assertions_per_lease_duration>10</assertions_per_lease_duration>
          <kind>AUTOMATIC_LIVELINESS_QOS</kind>
        </liveliness>        
      </datawriter_qos>
    </qos_profile>
             
    <qos_profile name="Vision_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false">
      <participant_qos>
        <!-- QoS used to configure the Vision data reader and writer created in the example code 
             The data is periodic so it will be sent best effort. A deadline has been added
             to make sure that an error is reported when no data is received for a certain time. -->       
        <participant_name>
          <name>Vision Sensor</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>                
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>Vision Data Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>11</sec>
          </period>
        </deadline>
        <history>
          <depth>100</depth>
        </history>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Vision Data Publisher</name>
        </publication_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>10</sec>
          </period>
        </deadline>
      </datawriter_qos>
    </qos_profile>        
    
    <qos_profile name="Vehicle_Platform_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false">
      <!-- QoS used to configure the Vehicle Platform data reader and writer created in the example code 
           The data is periodic so it will be sent best effort. A deadline has been added
           to make sure that an error is reported when no data is received for a certian time. -->
      <participant_qos>
        <!--
          The participant name, if it is set, will be displayed in the
          RTI tools, making it easier for you to tell one
          application from another when you're debugging.
        -->
        <participant_name>
          <name>Vehicle Platform</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>
      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>Vehicle Platform Status Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>11</sec>
          </period>
        </deadline>
        <history>
          <depth>100</depth>
        </history>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Vehicle Platform Status Publisher</name>
        </publication_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>10</sec>
          </period>
        </deadline>
      </datawriter_qos>
    </qos_profile>     

    <qos_profile name="Hello_World_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false">
      <!-- QoS used to configure the Vehicle Platform data reader and writer created in the example code 
           The data is periodic so it will be sent best effort. A deadline has been added
           to make sure that an error is reported when no data is received for a certian time. -->
      <participant_qos>
        <!--
          The participant name, if it is set, will be displayed in the
          RTI tools, making it easier for you to tell one
          application from another when you're debugging.
        -->
        <participant_name>
          <name>Hello World Platform</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>
      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>Hello World Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>11</sec>
          </period>
        </deadline>
        <history>
          <depth>100</depth>
        </history>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Hello World Publisher</name>
        </publication_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>10</sec>
          </period>
        </deadline>
      </datawriter_qos>
    </qos_profile>   
      
    <qos_profile name="Collision_Avoidance_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false">
     <!-- QoS used to configure the Collision Avoidance data reader and writer created in the example code 
          The data is periodic so it will be sent best effort. A deadline has been added
          to make sure that an error is reported when no data is received for a certain time. -->
      <participant_qos>
        <!--
          The participant name, if it is set, will be displayed in the
          RTI tools, making it easier for you to tell one
          application from another when you're debugging.
        -->
        <participant_name>
          <name>Collision Avoidance</name>
        </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>      
      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>Platform Control Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>11</sec>
          </period>
        </deadline>
        <history>
          <depth>100</depth>
        </history>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Platforn Control Publisher</name>
        </publication_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>10</sec>
          </period>
        </deadline>
      </datawriter_qos>
    </qos_profile>

    <qos_profile name="Sensor_Fusion_Profile" base_name="BuiltinQosLibExp::Generic.BestEffort" is_default_qos="false">
      <!-- QoS used to configure the Sensor Fusion data reader and writer created in the example code 
           The data is periodic so it will be sent best effort. A deadline has been added
           to make sure that an error is reported when no data is received for a certain time. -->       
     <participant_qos>
       <!--
         The participant name, if it is set, will be displayed in the
         RTI tools, making it easier for you to tell one
         application from another when you're debugging.
       -->
       <participant_name>
         <name>Sensor Fusion</name>
       </participant_name>
        <transport_builtin>
          <mask>UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>127.0.0.1</element>
            <!-- <element>192.168.1.2</element>-->
          </initial_peers>
        </discovery>
      </participant_qos>
      <datareader_qos>
        <subscription_name>
          <name>Sensor Object Reader</name>
        </subscription_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>11</sec>
          </period>
        </deadline>
        <history>
          <depth>100</depth>
        </history>
      </datareader_qos>
      <datawriter_qos>
        <publication_name>
          <name>Sensor Object Publisher</name>
        </publication_name>
        <deadline>
          <period>
            <nanosec>0</nanosec>
            <sec>10</sec>
          </period>
        </deadline>
      </datawriter_qos>
    </qos_profile>

    <qos_profile name="CameraImage_Profile" base_name="BuiltinQosLibExp::Generic.StrictReliable" is_default_qos="false">
      <participant_qos>
        <participant_name>
          <name>rearViewCamParticipant</name>
          <role_name>rearViewCamParticipantRole</role_name>
        </participant_name>
        <transport_builtin>
          <mask>SHMEM|UDPv4</mask>
        </transport_builtin>        
        <discovery>
          <initial_peers>
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <!-- Insert addresses here of machines you want     -->
            <!-- to contact                                     -->
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
            <element>shmem://</element>
            <element>127.0.0.1</element>
          </initial_peers>
        </discovery>
      </participant_qos>
      <datawriter_qos>
        <publication_name>
          <name>rearViewCamWriter</name>
        </publication_name>
        <publish_mode>
          <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
        </publish_mode>
      </datawriter_qos>
      <datareader_qos>
        <subscription_name>
          <name>rearViewCamReader</name>
        </subscription_name>
      </datareader_qos>
    </qos_profile>
    
    <qos_profile name="CameraXCDR2_Profile" 
                     base_name="BuiltinQosLibExp::Generic.StrictReliable.LargeData" is_default_qos="true">
            <datawriter_qos>
                <durability>
                    <kind>VOLATILE_DURABILITY_QOS</kind>
                </durability>
                <!-- Use XCDR2 format always, even for plain DataWriters so
                     that they can communicate with flat-data DataReaders, which
                     only support XCDR2 -->
                <representation>
                    <value><element>XCDR2_DATA_REPRESENTATION</element></value>
                </representation>
            </datawriter_qos>
            <datareader_qos>
                <!-- Use XCDR2 format always, even for plain DataReaders so
                     that they can communicate with flat-data DataWriters, which
                     only support XCDR2 -->
                <representation>
                    <value><element>XCDR2_DATA_REPRESENTATION</element></value>
                </representation>
            </datareader_qos>
            <participant_qos>
                <property>
                    <value>
                        <element>
                            <name>dds.transport.shmem.builtin.received_message_count_max</name>
                            <value>1000</value>
                        </element>
                            <element>
                            <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                            <value>60000000</value>
                        </element>
                    </value>
                </property>
            </participant_qos>
        </qos_profile>
  </qos_library>
</dds>
