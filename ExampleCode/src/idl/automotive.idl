/****************************************************************************
(c) 2005-2019 Copyright, Real-Time Innovations, Inc.  All rights reserved.
RTI grants Licensee a license to use, modify, compile, and create derivative 
works of the Software.  Licensee has the right to distribute object form 
only for use with RTI products.  The Software is provided 'as is', with no
arranty of any type, including any warranty for fitness for any purpose. RTI
is under no obligation to maintain or support the Software.  RTI shall not
be liable for any incidental or consequential damages arising out of the 
use or inability to use the software.
*****************************************************************************/

struct POSIXTimestamp {
  long s;
  long ns;
};

enum IndicatorStatusEnum {
  INDICATOR_OFF     = 0,
  INDICATOR_LEFT    = 1,
  INDICATOR_RIGHT   = 2,
  INDICATOR_HAZARD  = 3
};

enum ClassificationEnum
{
    CLASSIFICATION_UNKNOWN      = 0,
    CLASSIFICATION_UNKNOWNSMALL = 1,
    CLASSIFICATION_UNKNOWNBIG   = 2, 
    CLASSIFICATION_PEDESTRIAN   = 3,
    CLASSIFICATION_BIKE         = 4,
    CLASSIFICATION_CAR          = 5,
    CLASSIFICATION_TRUCK        = 6,
    CLASSIFICATION_BARRIER      = 7
};


module Alerts {

    struct DriverAlerts {
        boolean blindSpotDriver;
        boolean blindSpotPassenger;
        boolean frontCollision;
        boolean backCollision;
        boolean parkingCollision;
        boolean driverAttention;
    };

};

module Helloworld {
    struct HelloWordMessage {
        string<256> msg;
    };
};


module Lane {

    enum ConfidenceEnum
    {
        CONFIDENCE_NONE = 0,
        CONFIDENCE_LOW  = 1,
        CONFIDENCE_MED  = 2,
        CONFIDENCE_HIGH = 3
    };


    enum LaneBoundaryEnum
    {
        BOUNDRY_NONE         = 0,
        BOUNDRY_INVALID      = 1,
        BOUNDRY_SOLID        = 2,
        BOUNDRY_DASHED       = 3,
        BOUNDRY_VIRTUAL      = 4,
        BOUNDRY_DOTS         = 5,
        BOUNDRY_ROADEDGE     = 6,
        BOUNDRY_UNDECIDED    = 7,
        BOUNDRY_DOUBLEMARKER = 8
    };


    struct LaneObject {
        boolean isValid;
        ConfidenceEnum confidence;
        LaneBoundaryEnum boundaryType;
        float offset;
        float headingAngle;
        float curvature;
    };

    struct LaneSensor {
        LaneObject left;
        LaneObject right;
    };

};

module Lidar {

    const long MAX_POINTS = 30000;

    struct Point {
        float point[3];
    };

    struct PCloud {
        sequence <Point, MAX_POINTS> Location;
        octet color;
        float normal;
        float intensity;
        long  count;
        float xLimits[2];
        float yLimits[2];
        float zLimits[2];
    };

    struct LidarSensor {
        POSIXTimestamp timestamp;
        PCloud ptCloud;
    };
};


module Platform {

    struct PlatformControl {
        // sample ID : counter that represents the instance of the data sent.
        long sample_id;
        POSIXTimestamp timestamp;
        float vehicleSteerAngle;
        float speed;

        IndicatorStatusEnum blinkerStatus;
    };

    struct PlatformStatus {
        POSIXTimestamp timestamp;           /* recording time stamp */
        float vehSpd;                       /* vehicle speed [m/s] */
        IndicatorStatusEnum blinkerStatus;  /* blinker status */
        float posGasPedal;                  /* position of gas pedal [0,100][%] */
        float velocity;
        float yawRate;
        float vehicleSteerAngle;
    };

};

module Sensor {

    const long SENSOR_OBJECT_LIST_MAX_SIZE = 128; 

    enum RangeModeEnum 
    {
        RANGE_NONE   = 0,
        RANGE_SHORT  = 1,
        RANGE_MEDIUM = 2,
        RANGE_LONG   = 3
    };


    struct SensorObject {
        ClassificationEnum classification; 
        float position[3];
        float velocity[3];
        float size[3];
        float amplitude;
        RangeModeEnum rangeMode;
        float rangeRate;
    };


    struct SensorObjectList {
        POSIXTimestamp timestamp;
        sequence<SensorObject, SENSOR_OBJECT_LIST_MAX_SIZE> objects;
    };

};

module Vision {

    const long VISION_OBJECT_LIST_MAX_SIZE = 10;


    struct VisionObject {
        ClassificationEnum classification;
        float position[3];
        float velocity[3];
        float size[3];
    };

    struct VisionSensor {
        long id; //@key
        POSIXTimestamp timestamp;
        sequence <VisionObject, VISION_OBJECT_LIST_MAX_SIZE> objects;
    };

};

// added for ROS2-compatible LiDAR and image support
module builtin_interfaces {
    module msg {
        module dds_ {
            struct Time_ {
                long sec_;    //@ID 0
                unsigned long nanosec_;    //@ID 1
            };
            //@Extensibility EXTENSIBLE_EXTENSIBILITY
        }; // end of 'dds_' module
    }; // end of 'msg' module
}; // end of 'builtin_interfaces' module
	
module std_msgs {
    module msg {
        module dds_ {
            struct Header_ {
                builtin_interfaces::msg::dds_::Time_ stamp_;    //@ID 0
                string frame_id_;    //@ID 1
            };
            //@Extensibility EXTENSIBLE_EXTENSIBILITY
        }; // end of 'dds_' module
    }; // end of 'msg' module
}; // end of 'std_msgs' module
	
module sensor_msgs {
    module msg {
        module dds_ {
            struct PointField_ {
                string name_;
                unsigned long offset_;
                octet datatype_;
                unsigned long count_;
            };
            //@Extensibility EXTENSIBLE_EXTENSIBILITY

            struct PointCloud2_ {
                std_msgs::msg::dds_::Header_ header_;
                unsigned long height_;
                unsigned long width_;
                sequence <PointField_, 4> fields_;
                boolean is_bigendian_;
                unsigned long point_step_;
                unsigned long row_step_;
                sequence <octet, 368640> data_;
                boolean is_dense_;
            };
        }; // end of 'dds_' module
    }; // end of 'msg' module
}; // end of 'sensor_msgs' module

// [neil] added for shapeType --> LiDAR conversion
enum ShapeFillKind {
    SOLID_FILL,
    TRANSPARENT_FILL,
    HORIZONTAL_HATCH_FILL,
    VERTICAL_HATCH_FILL
};

struct ShapeType
{
    string<128> color; //@key
    long x;
    long y;
    long shapesize;
};//@Extensibility EXTENSIBLE_EXTENSIBILITY 

struct ShapeTypeExtended : ShapeType {
    ShapeFillKind fillKind;
    float angle;
};//@Extensibility EXTENSIBLE_EXTENSIBILITY 


const long MAX_IMAGE_SIZE = (1366 * 768 * 4);
module CameraImage {
    // uncomment next 2 lines to enable FlatData
    // @mutable
    // @language_binding(FLAT_DATA)
    
    // uncomment next line to enable ZeroCopy
    // @transfer_mode(SHMEM_REF)

    struct CameraImageData {
        unsigned long id;   //@key
        long sec_;
        unsigned long nanosec_;
        unsigned long seqnum;
        octet data[MAX_IMAGE_SIZE];
    };
};

